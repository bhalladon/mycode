import unittest, time, requests, os,csv,sys
import simplejson as json
import requests.packages.urllib3
import stdiomask
import threading,logging
try:
    requests.packages.urllib3.disable_warnings()
except:
    pass
requests.packages.urllib3.has_memoryview = False

cas_ip="watchdog.symantec.com"

class casutilities():

    def httpcall(self, call_method, rapicall, values, headers):
        url = "https://" +cas_ip+ rapicall
        call_method = call_method.lower()
        if call_method == "get":
            r = requests.get(url, data=values, headers=headers, verify=False)
        if call_method == "post":
            r = requests.post(url, data=values, headers=headers, verify=False)
        if call_method == "patch":
            r = requests.patch(url, data=values, headers=headers, verify=False)
        if call_method == "delete":
            r = requests.delete(url, data=values, headers=headers, verify=False)
        if r.status_code in [200,201]:
            fdata = json.loads(r.text)
            return fdata

        else:
            if "HTTP 504: Gateway Timeout (IntelliVM Control Service busy" in r.text:
                return r.text
                return r.status_code
            else:
                print("Unable to process the request " + str(rapicall))
                print("HTTP error code is: " + str(r.status_code))
                print(r.text)
                return r.text
                return r.status_code


    def generate_token(self):
        a = casutilities()
        username = str(raw_input("Please enter your domain username:"))
        password=stdiomask.getpass("Password:", "*")
        #password = str(raw_input("Please enter your domain password:"))
        values = {"username":username, "password":password}
        headers = {"User-Agent":"python"}
        token = a.httpcall("POST", "/api/login", values, headers)['access_token']
        return token

    def get_all_file_ids(self,ticket_number,token):
        file_name=[]
        file_id_list=[]
        values={'ticket_id':ticket_number}
        headers={"Authorization": 'Token token='+str(token)}
        total_files = a.httpcall("GET", "/api/kanban/tickets/"+str(ticket_number)+"/files", values, headers)['meta']['total']
        print("Total Number of files with ticket id " + str(ticket_number) + " are: " + str(total_files))
        # return total_files
        total_data = a.httpcall("GET", "/api/kanban/tickets/"+str(ticket_number)+"/files", values, headers)


        for x in range(total_files):
            #filename = a.httpcall("GET","/api/kanban/tickets/"+str(ticket_number)+"/files",values,headers)['data'][x]['attributes']['name']
            #fileid = a.httpcall("GET", "/api/kanban/tickets/"+str(ticket_number)+"/files", values, headers)['data'][x]['attributes']['id']
            fileid = total_data['data'][x]['attributes']['id']
            #print("File id found " + str(x) + " is: " + str(fileid))
            file_id = file_id_list.append(fileid)
        print("File id's for ticket number " + str(ticket_number) + str(" are: "))
        #print(file_id_list)
        return file_id_list

    def get_file_id_using_filename_ticketnumber(self,ticket_number,filename,token):
        filename = str(filename).lower()
        values = {'ticket_id': ticket_number}
        headers = {"Authorization": 'Token token=' + str(token)}
        total_files = a.httpcall("GET", "/api/kanban/tickets/" + str(ticket_number) + "/files", values, headers)['meta']['total']
        for x in range(total_files):
            name = a.httpcall("GET","/api/kanban/tickets/"+str(ticket_number)+"/files",values,headers)['data'][x]['attributes']['name']
            if filename in name:
                print("file with name: " + str(filename) + " found.")
                fileid = a.httpcall("GET","/api/kanban/tickets/"+str(ticket_number)+"/files",values,headers)['data'][x]['attributes']['id']
                print("File id for file " + str(filename) + " is: " + str(fileid))

    def update_file_status(self, fileid, new_status, token):
        values={'id': fileid, 'status': new_status}
        headers={"Authorization": 'Token token='+str(token)}
        files = a.httpcall("PATCH", "/api/kanban/files/"+str(fileid), values, headers)
        g = json.dumps(files)
        print(g)

    def update_all_file_status_for_a_ticket(self, ticket_number, status, token):
        f = a.get_all_file_ids(ticket_number, token)
        return f
        #for x in f:
        #    a.update_file_status(x,status,token)

    def ticket(self):
        try:
            ticket_number = int(raw_input("Please enter the ticket number:"))
            return ticket_number
        except ValueError:
            print("The ticket number you entered is not an integer")
            print("Please try again and enter an integer value")
            a.ticket()

    def num_of_threads(self):
        try:
            no_of_con_threads = int(raw_input("Please enter the number of concurrent threads you want to run at a time. Max Recommended size is 50:"))
            return no_of_con_threads
        except ValueError:
            print("The number you entered is not an integer")
            print("Please try again and enter an integer value")
            a.num_of_threads()

    def status_from_user(self):
        status = str(raw_input("Please choose one of the status from the list below to be set on the files:\n\
                                1) NO_ACTION,\n\
                                2) QA_NON_REPRODUCIBLE,\n\
                                3) DETECTION_REMAINS,\n\
                                4) ANALYSIS_REQUIRED,\n\
                                5) ALREADY_WHITELISTED,\n\
                                6) CONFIRMED,\n\
                                7) CORRUPT_OR_INVALID,\n\
                                8) DETECTION_CONFIRMED,\n\
                                9) DETECTION_FAILED,\n\
                                10) ANALYST_NON_REPRODUCIBLE,\n\
                                11) FAILED,\n\
                                12) FILE_REVOKED,\n\
                                13) KEEPING_DETECTION,\n\
                                14) ADDING_DETECTION,\n\
                                15) PROACTIVELY_WHITELISTED,\n\
                                16) PROACTIVE_WHITELIST_CONFIRMED,\n\
                                17) CLEAN_FILE,\n\
                                18) REMAPPING_DETECTION,\n\
                                19) REVOKE_FILE,\n\
                                20) REVOKING_DETECTION,\n\
                                21) SECOND_LOOK_&_TECHNICAL_DESCRIPTION_REQUIRED,\n\
                                22) SECOND_LOOK_REQUIRED,\n\
                                23) TECHNICAL_DESCRIPTION_REQUIRED,\n\
                                24) VERIFIED_CLEAN,\n\
                                25) WHITELISTED,\n\
                                26) WHITELIST_CONFIRMED,\n\
                                27) WHITELIST_INVALID,\n\
                                Please enter a correct status number:"))
        if status == "1":
            status = "NO_ACTION"
        elif status == "2":
            status = "QA_NON_REPRODUCIBLE"
        elif status == "3":
            status = "DETECTION_REMAINS"
        elif status == "4":
            status = "ANALYSIS_REQUIRED"
        elif status == "5":
            status = "ALREADY_WHITELISTED"
        elif status == "6":
            status = "CONFIRMED"
        elif status == "7":
            status = "CORRUPT_OR_INVALID"
        elif status == "8":
            status = "DETECTION_CONFIRMED"
        elif status == "9":
            status = "DETECTION_FAILED"
        elif status == "10":
            status = "ANALYST_NON_REPRODUCIBLE"
        elif status == "11":
            status = "FAILED"
        elif status == "12":
            status = "FILE_REVOKED"
        elif status == "13":
            status = "KEEPING_DETECTION"
        elif status == "14":
            status = "ADDING_DETECTION"
        elif status == "15":
            status = "PROACTIVELY_WHITELISTED"
        elif status == "16":
            status = "PROACTIVE_WHITELIST_CONFIRMED"
        elif status == "17":
            status = "CLEAN_FILE"
        elif status == "18":
            status = "REMAPPING_DETECTION"
        elif status == "19":
            status = "REVOKE_FILE"
        elif status == "20":
            status = "REVOKING_DETECTION"
        elif status == "21":
            status = "SECOND_LOOK_&_TECHNICAL_DESCRIPTION_REQUIRED"
        elif status == "22":
            status = "SECOND_LOOK_REQUIRED"
        elif status == "23":
            status = "TECHNICAL_DESCRIPTION_REQUIRED"
        elif status == "24":
            status = "VERIFIED_CLEAN"
        elif status == "25":
            status = "WHITELISTED"
        elif status == "26":
            status = "WHITELIST_CONFIRMED"
        elif status == "27":
            status = "WHITELIST_INVALID"
        elif status not in ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17",
                            "18", "19", "20", "21", "22", "23", "24", "25", "26", "27"]:
            print("Please choose a valid action. Please try again:")
            a.status_from_user()
        return status



class test_systeminfo(unittest.TestCase):

    def setUp(self):
        global a
        a = casutilities()
        print("Script Author: Rajiv Bhalla")
        print("This script will update the status of all files for a single ticket in one go.")
        global token
        print("First we will generate the access token.")
        token = a.generate_token()

    def test_a_bsod_xp(self):
        g = a.ticket()
        f = a.status_from_user()
        print(f)
        total_thread = a.num_of_threads()
        print total_thread
        flist = a.update_all_file_status_for_a_ticket(g, f, token)
        threads = list()
        for index in flist:
            #logging.info("Main    : create and start thread %d.", index)
            x = threading.Thread(target=a.update_file_status, args=(index, f, token))
            threads.append(x)
            x.start()
            if len(threads) % total_thread == 0:
                while x.isAlive():
                    pass
        x.join()

        def continue_kare():
            continue_test = str(raw_input("\n\n\n\nDo you want to update more tickets? Press y/n followed by Enter Key:"))
            continue_test = str(continue_test).lower()
            if continue_test == "y":
                g = a.ticket()
                f = a.status_from_user()
                print(f)
                flist = a.update_all_file_status_for_a_ticket(g, f, token)
                threads = list()
                for index in flist:
                    # logging.info("Main    : create and start thread %d.", index)
                    x = threading.Thread(target=a.update_file_status, args=(index, f, token))
                    threads.append(x)
                    x.start()
                    if len(threads) % total_thread == 0:
                        while x.isAlive():
                            pass
                x.join()
                continue_kare()
            elif continue_test == "n":
                try:
                    sys.exit()
                except SystemExit:
                    print("Goodbye and have a nice day.")
            elif continue_test not in ["y", "n"]:
                print("Please enter y or n. Please try again.")
                continue_kare()
        continue_kare()




if __name__ == '__main__':
    unittest.main()
